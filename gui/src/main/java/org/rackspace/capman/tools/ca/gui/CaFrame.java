package org.rackspace.capman.tools.ca.gui;

import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.X509Certificate;

import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.jce.PKCS10CertificationRequest;
import org.bouncycastle.jce.provider.HackedProviderAccessor;
import org.bouncycastle.jce.provider.JCERSAPrivateCrtKey;
import org.bouncycastle.jce.provider.X509CertificateObject;
import org.rackspace.capman.tools.ca.primitives.RsaConst;
import org.rackspace.capman.tools.ca.PemUtils;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import org.rackspace.capman.tools.ca.StringUtils;
import org.rackspace.capman.tools.ca.gui.utils.ButtonGroupMapper;
import org.rackspace.capman.tools.ca.RSAKeyUtils;
import static org.rackspace.capman.tools.ca.gui.utils.GuiConst.*;
import org.rackspace.capman.tools.ca.primitives.RsaPair;
import org.rackspace.capman.tools.ca.exceptions.ConversionException;
import org.rackspace.capman.tools.ca.exceptions.NoSuchAlgorithmException;
import org.rackspace.capman.tools.ca.exceptions.NullKeyException;

import org.rackspace.capman.tools.ca.exceptions.PemException;
import org.rackspace.capman.tools.ca.exceptions.RsaException;
import static org.rackspace.capman.tools.ca.StringUtils.getEST;
import org.rackspace.capman.tools.ca.CertUtils;
import org.rackspace.capman.tools.ca.CsrUtils;
import org.rackspace.capman.tools.ca.primitives.PemBlock;
import org.rackspace.capman.tools.ca.zeus.ZeusCertFile;
import org.rackspace.capman.tools.ca.zeus.ZeusUtil;

public class CaFrame extends javax.swing.JFrame {

    public CaFrame() {
        initComponents();
        userInit();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appTabs = new javax.swing.JTabbedPane();
        keyGenTab = new javax.swing.JPanel();
        rsaGenPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        keySizeTextField = new javax.swing.JTextField();
        setKeyFileButton = new javax.swing.JButton();
        keyFN1 = new javax.swing.JTextField();
        genKeyButton = new javax.swing.JButton();
        csrGenTab = new javax.swing.JPanel();
        csrSubjectPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ouTextField = new javax.swing.JTextField();
        oTextField = new javax.swing.JTextField();
        lTextField = new javax.swing.JTextField();
        stTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cnTextField = new javax.swing.JTextField();
        cTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        csrOptionsPanel = new javax.swing.JPanel();
        csrFnButton1 = new javax.swing.JButton();
        csrFN1 = new javax.swing.JTextField();
        keyFnButton1 = new javax.swing.JButton();
        keyFN2 = new javax.swing.JTextField();
        GenerateCsrButton = new javax.swing.JButton();
        caCheckBox = new javax.swing.JCheckBox();
        lsRSAPanel = new javax.swing.JPanel();
        saveRsaRadio = new javax.swing.JRadioButton();
        loadRsaRadio = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        newCsrKeySizeTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        csrSigningTab = new javax.swing.JPanel();
        CSRSigningPanel = new javax.swing.JPanel();
        caFilesPanel = new javax.swing.JPanel();
        caCertButton = new javax.swing.JButton();
        caKeyFNButton = new javax.swing.JButton();
        caCertFN = new javax.swing.JTextField();
        caKeyFN = new javax.swing.JTextField();
        x509OptionsPanel = new javax.swing.JPanel();
        daysTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        isSerialNumberSpecified = new javax.swing.JCheckBox();
        serialTextField = new javax.swing.JTextField();
        csrButton2 = new javax.swing.JButton();
        csrFN2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        setOutputCrtFileButton = new javax.swing.JButton();
        certOutFN = new javax.swing.JTextField();
        signCSRButton = new javax.swing.JButton();
        selfSignCA = new javax.swing.JCheckBox();
        VerifyPanel = new javax.swing.JPanel();
        verifyKeyCertPanel = new javax.swing.JPanel();
        vkcKeyButton = new javax.swing.JButton();
        vkcKeyFN = new javax.swing.JTextField();
        vkcCertButton = new javax.swing.JButton();
        vkcCertFN = new javax.swing.JTextField();
        verifyKeyAndCertButton = new javax.swing.JButton();
        keycertandchainPanel = new javax.swing.JPanel();
        setParentCertButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        issuerCertFN = new javax.swing.JTextField();
        subjectCertFN = new javax.swing.JTextField();
        verifyIssuerAndSubjectCertButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        keyText = new javax.swing.JTextPane();
        jLabel13 = new javax.swing.JLabel();
        clearKeyButton = new javax.swing.JButton();
        verifyKeyCertChain = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        chainText = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        certText = new javax.swing.JTextPane();
        jLabel14 = new javax.swing.JLabel();
        clearCertButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        clearChainButton = new javax.swing.JButton();
        DebugTab = new javax.swing.JPanel();
        debugPanel = new javax.swing.JPanel();
        clearDebugButton = new javax.swing.JButton();
        debugStateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        debugMessagesPane = new javax.swing.JTextPane();
        setMysteryFileButton = new javax.swing.JButton();
        mysteryFN = new javax.swing.JTextField();
        identifyFileButton = new javax.swing.JButton();
        MultiParseFileButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        invokeGC = new javax.swing.JButton();
        displayMemory = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Silly Certificate Authority Toy");

        appTabs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        appTabs.setName("caTabPan"); // NOI18N

        rsaGenPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rsa Options"));

        jLabel10.setText("Key Size");

        keySizeTextField.setText("2048");

        setKeyFileButton.setText("Set Rsa Key File");
        setKeyFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setKeyFileButtonActionPerformed(evt);
            }
        });

        genKeyButton.setText("Generate RSA Key Pair");
        genKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rsaGenPanelLayout = new javax.swing.GroupLayout(rsaGenPanel);
        rsaGenPanel.setLayout(rsaGenPanelLayout);
        rsaGenPanelLayout.setHorizontalGroup(
            rsaGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rsaGenPanelLayout.createSequentialGroup()
                .addGroup(rsaGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rsaGenPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(4, 4, 4)
                        .addComponent(keySizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rsaGenPanelLayout.createSequentialGroup()
                        .addGroup(rsaGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(genKeyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(setKeyFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keyFN1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rsaGenPanelLayout.setVerticalGroup(
            rsaGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rsaGenPanelLayout.createSequentialGroup()
                .addGroup(rsaGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(keySizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rsaGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setKeyFileButton)
                    .addComponent(keyFN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genKeyButton))
        );

        javax.swing.GroupLayout keyGenTabLayout = new javax.swing.GroupLayout(keyGenTab);
        keyGenTab.setLayout(keyGenTabLayout);
        keyGenTabLayout.setHorizontalGroup(
            keyGenTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyGenTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rsaGenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(514, Short.MAX_VALUE))
        );
        keyGenTabLayout.setVerticalGroup(
            keyGenTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyGenTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rsaGenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(665, Short.MAX_VALUE))
        );

        appTabs.addTab("Key Generation", keyGenTab);

        csrSubjectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("CSR Subject")));

        jLabel1.setText("Country");

        jLabel2.setText("State");

        jLabel3.setText("Locality");

        jLabel4.setText("Organization");

        jLabel5.setText("Organizational Unit");

        jLabel6.setText("Common Name");

        cnTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("Email");

        javax.swing.GroupLayout csrSubjectPanelLayout = new javax.swing.GroupLayout(csrSubjectPanel);
        csrSubjectPanel.setLayout(csrSubjectPanelLayout);
        csrSubjectPanelLayout.setHorizontalGroup(
            csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrSubjectPanelLayout.createSequentialGroup()
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7))
                .addGap(3, 3, 3)
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(emailTextField)
                    .addComponent(cTextField)
                    .addComponent(cnTextField)
                    .addComponent(stTextField)
                    .addComponent(lTextField)
                    .addComponent(oTextField)
                    .addComponent(ouTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)))
        );
        csrSubjectPanelLayout.setVerticalGroup(
            csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrSubjectPanelLayout.createSequentialGroup()
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(stTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(oTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ouTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(csrSubjectPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(csrSubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        csrOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("CSR options"));

        csrFnButton1.setText("Set CSR filename");
        csrFnButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csrFnButton1ActionPerformed(evt);
            }
        });

        keyFnButton1.setText("Set Key filename");
        keyFnButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyFnButton1ActionPerformed(evt);
            }
        });

        GenerateCsrButton.setText("Generate CSR");
        GenerateCsrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateCsrButtonActionPerformed(evt);
            }
        });

        caCheckBox.setText("Cert will be a CA");

        lsRSAPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rsa Key"));

        saveRsaRadio.setSelected(true);
        saveRsaRadio.setText("<html>Generate new private RSA key during CSR generation<small>  (Save key in <span style=\"color:red;\">PEM</span> format)</small></html>");

        loadRsaRadio.setText("<html>Use existing private RSA key to generate CSR<small>  (loads key in <span style=\"color: red;\">PEM</small> format)</html>");

        jLabel8.setText("Key Size");

        newCsrKeySizeTextField.setText("2048");

        jLabel9.setText("<html><small><span style=\"color: blue\">(Required if generating a new key)</span></small></html>");

        javax.swing.GroupLayout lsRSAPanelLayout = new javax.swing.GroupLayout(lsRSAPanel);
        lsRSAPanel.setLayout(lsRSAPanelLayout);
        lsRSAPanelLayout.setHorizontalGroup(
            lsRSAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lsRSAPanelLayout.createSequentialGroup()
                .addGroup(lsRSAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loadRsaRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveRsaRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(lsRSAPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lsRSAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newCsrKeySizeTextField))))
                .addContainerGap(209, Short.MAX_VALUE))
        );
        lsRSAPanelLayout.setVerticalGroup(
            lsRSAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lsRSAPanelLayout.createSequentialGroup()
                .addComponent(saveRsaRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadRsaRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lsRSAPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(newCsrKeySizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout csrOptionsPanelLayout = new javax.swing.GroupLayout(csrOptionsPanel);
        csrOptionsPanel.setLayout(csrOptionsPanelLayout);
        csrOptionsPanelLayout.setHorizontalGroup(
            csrOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrOptionsPanelLayout.createSequentialGroup()
                .addGroup(csrOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(csrOptionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lsRSAPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(caCheckBox)
                    .addGroup(csrOptionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(GenerateCsrButton))
                    .addGroup(csrOptionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(csrOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(csrFnButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(keyFnButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(csrOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(keyFN2)
                            .addComponent(csrFN1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        csrOptionsPanelLayout.setVerticalGroup(
            csrOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrOptionsPanelLayout.createSequentialGroup()
                .addComponent(caCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lsRSAPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GenerateCsrButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csrOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csrFnButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csrFN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(csrOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyFnButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyFN2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout csrGenTabLayout = new javax.swing.GroupLayout(csrGenTab);
        csrGenTab.setLayout(csrGenTabLayout);
        csrGenTabLayout.setHorizontalGroup(
            csrGenTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrGenTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(csrGenTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(csrOptionsPanel, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(csrSubjectPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(461, Short.MAX_VALUE))
        );
        csrGenTabLayout.setVerticalGroup(
            csrGenTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrGenTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(csrSubjectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(csrOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        appTabs.addTab("CSR Generation", csrGenTab);

        CSRSigningPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sign Csr"));

        caFilesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Certificate Authority Files"));

        caCertButton.setText("set CA Cert File");
        caCertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caCertButtonActionPerformed(evt);
            }
        });

        caKeyFNButton.setText("set CA Key File");
        caKeyFNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caKeyFNButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout caFilesPanelLayout = new javax.swing.GroupLayout(caFilesPanel);
        caFilesPanel.setLayout(caFilesPanelLayout);
        caFilesPanelLayout.setHorizontalGroup(
            caFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(caFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(caKeyFNButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(caCertButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(caFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caKeyFN, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(caCertFN, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE))
                .addContainerGap())
        );
        caFilesPanelLayout.setVerticalGroup(
            caFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caFilesPanelLayout.createSequentialGroup()
                .addGroup(caFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(caCertButton)
                    .addComponent(caCertFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(caFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(caKeyFNButton)
                    .addComponent(caKeyFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        x509OptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("X509 Options"));

        jLabel11.setText("Days Valid");

        isSerialNumberSpecified.setText("Specify Serial Number");

        csrButton2.setText("set CSR file");
        csrButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csrButton2ActionPerformed(evt);
            }
        });

        jLabel12.setText("<html><small>(leave unchecked to generate serial number <span style=\"color: blue;\">automatically</span>)</small></html> ");

        setOutputCrtFileButton.setText("Set Output CRT File");
        setOutputCrtFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setOutputCrtFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout x509OptionsPanelLayout = new javax.swing.GroupLayout(x509OptionsPanel);
        x509OptionsPanel.setLayout(x509OptionsPanelLayout);
        x509OptionsPanelLayout.setHorizontalGroup(
            x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(x509OptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(isSerialNumberSpecified, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(setOutputCrtFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(csrButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(daysTextField)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(serialTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(csrFN2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                    .addComponent(certOutFN, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE))
                .addContainerGap())
        );
        x509OptionsPanelLayout.setVerticalGroup(
            x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(x509OptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(daysTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isSerialNumberSpecified)
                    .addComponent(serialTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csrFN2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csrButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(x509OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setOutputCrtFileButton)
                    .addComponent(certOutFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        signCSRButton.setText("Sign CSR into x509 certificate");
        signCSRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signCSRButtonActionPerformed(evt);
            }
        });

        selfSignCA.setText("Self Sign csr and create CA Certificate");

        javax.swing.GroupLayout CSRSigningPanelLayout = new javax.swing.GroupLayout(CSRSigningPanel);
        CSRSigningPanel.setLayout(CSRSigningPanelLayout);
        CSRSigningPanelLayout.setHorizontalGroup(
            CSRSigningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CSRSigningPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CSRSigningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caFilesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(CSRSigningPanelLayout.createSequentialGroup()
                        .addComponent(signCSRButton, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selfSignCA, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(x509OptionsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        CSRSigningPanelLayout.setVerticalGroup(
            CSRSigningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CSRSigningPanelLayout.createSequentialGroup()
                .addComponent(x509OptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(caFilesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CSRSigningPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signCSRButton)
                    .addComponent(selfSignCA))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout csrSigningTabLayout = new javax.swing.GroupLayout(csrSigningTab);
        csrSigningTab.setLayout(csrSigningTabLayout);
        csrSigningTabLayout.setHorizontalGroup(
            csrSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrSigningTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CSRSigningPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(450, Short.MAX_VALUE))
        );
        csrSigningTabLayout.setVerticalGroup(
            csrSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrSigningTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CSRSigningPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(299, Short.MAX_VALUE))
        );

        appTabs.addTab("CSR Signing", csrSigningTab);

        verifyKeyCertPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Key And Cert Verify"));

        vkcKeyButton.setText("Set Key File");
        vkcKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vkcKeyButtonActionPerformed(evt);
            }
        });

        vkcCertButton.setText("Set Cert File");
        vkcCertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vkcCertButtonActionPerformed(evt);
            }
        });

        verifyKeyAndCertButton.setText("Verify Key And Cert");
        verifyKeyAndCertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyKeyAndCertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout verifyKeyCertPanelLayout = new javax.swing.GroupLayout(verifyKeyCertPanel);
        verifyKeyCertPanel.setLayout(verifyKeyCertPanelLayout);
        verifyKeyCertPanelLayout.setHorizontalGroup(
            verifyKeyCertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verifyKeyCertPanelLayout.createSequentialGroup()
                .addGroup(verifyKeyCertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(verifyKeyCertPanelLayout.createSequentialGroup()
                        .addGroup(verifyKeyCertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(vkcCertButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(vkcKeyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(verifyKeyCertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vkcCertFN)
                            .addComponent(vkcKeyFN, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)))
                    .addComponent(verifyKeyAndCertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        verifyKeyCertPanelLayout.setVerticalGroup(
            verifyKeyCertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verifyKeyCertPanelLayout.createSequentialGroup()
                .addGroup(verifyKeyCertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vkcKeyButton)
                    .addComponent(vkcKeyFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(verifyKeyCertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vkcCertButton)
                    .addComponent(vkcCertFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(verifyKeyAndCertButton)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        keycertandchainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Verify Issueing Cert and Subject Chain Cert"));

        setParentCertButton.setText("Set Issuer Cert");
        setParentCertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setParentCertButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Set Subject Cert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        verifyIssuerAndSubjectCertButton.setText("Verify Issuer and Subject Cert");
        verifyIssuerAndSubjectCertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyIssuerAndSubjectCertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout keycertandchainPanelLayout = new javax.swing.GroupLayout(keycertandchainPanel);
        keycertandchainPanel.setLayout(keycertandchainPanelLayout);
        keycertandchainPanelLayout.setHorizontalGroup(
            keycertandchainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keycertandchainPanelLayout.createSequentialGroup()
                .addGroup(keycertandchainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keycertandchainPanelLayout.createSequentialGroup()
                        .addGroup(keycertandchainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(setParentCertButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(keycertandchainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(subjectCertFN)
                            .addComponent(issuerCertFN, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)))
                    .addComponent(verifyIssuerAndSubjectCertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        keycertandchainPanelLayout.setVerticalGroup(
            keycertandchainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keycertandchainPanelLayout.createSequentialGroup()
                .addGroup(keycertandchainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setParentCertButton)
                    .addComponent(issuerCertFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keycertandchainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(subjectCertFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(verifyIssuerAndSubjectCertButton)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Verify Key Cert and Chain"));

        keyText.setBackground(new java.awt.Color(0, 0, 0));
        keyText.setFont(new java.awt.Font("Monospaced", 1, 8));
        keyText.setForeground(new java.awt.Color(0, 255, 0));
        jScrollPane2.setViewportView(keyText);

        jLabel13.setText("Key");

        clearKeyButton.setText("Clear");
        clearKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearKeyButtonActionPerformed(evt);
            }
        });

        verifyKeyCertChain.setText("Verify");
        verifyKeyCertChain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyKeyCertChainActionPerformed(evt);
            }
        });

        chainText.setBackground(new java.awt.Color(0, 0, 0));
        chainText.setFont(new java.awt.Font("Monospaced", 1, 8));
        chainText.setForeground(new java.awt.Color(0, 255, 0));
        jScrollPane3.setViewportView(chainText);

        certText.setBackground(new java.awt.Color(0, 0, 0));
        certText.setFont(new java.awt.Font("Monospaced", 1, 8));
        certText.setForeground(new java.awt.Color(0, 255, 0));
        jScrollPane4.setViewportView(certText);

        jLabel14.setText("Cert");

        clearCertButton.setText("Clear");
        clearCertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCertButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Chain");

        clearChainButton.setText("Clear");
        clearChainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(clearKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearCertButton, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(clearChainButton, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))))
                    .addComponent(verifyKeyCertChain, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(clearKeyButton)
                            .addComponent(jLabel14)
                            .addComponent(clearCertButton)
                            .addComponent(jLabel15)
                            .addComponent(clearChainButton))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(verifyKeyCertChain)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout VerifyPanelLayout = new javax.swing.GroupLayout(VerifyPanel);
        VerifyPanel.setLayout(VerifyPanelLayout);
        VerifyPanelLayout.setHorizontalGroup(
            VerifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VerifyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(VerifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(VerifyPanelLayout.createSequentialGroup()
                        .addComponent(verifyKeyCertPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(518, Short.MAX_VALUE))
                    .addGroup(VerifyPanelLayout.createSequentialGroup()
                        .addComponent(keycertandchainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(518, 518, 518))
                    .addGroup(VerifyPanelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        VerifyPanelLayout.setVerticalGroup(
            VerifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VerifyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(verifyKeyCertPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keycertandchainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        appTabs.addTab("Verification", VerifyPanel);

        debugPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Debug Messages"));

        clearDebugButton.setText("Clear Messages");
        clearDebugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDebugButtonActionPerformed(evt);
            }
        });

        debugStateButton.setText("Show App State");
        debugStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugStateButtonActionPerformed(evt);
            }
        });

        debugMessagesPane.setBackground(new java.awt.Color(0, 0, 0));
        debugMessagesPane.setEditable(false);
        debugMessagesPane.setFont(new java.awt.Font("Monospaced", 1, 14));
        debugMessagesPane.setForeground(new java.awt.Color(0, 255, 0));
        jScrollPane1.setViewportView(debugMessagesPane);

        setMysteryFileButton.setText("Set Mystery File");
        setMysteryFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMysteryFileButtonActionPerformed(evt);
            }
        });

        identifyFileButton.setText("Identify Mystery file");
        identifyFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identifyFileButtonActionPerformed(evt);
            }
        });

        MultiParseFileButton.setText("MultiParse Mystery File");
        MultiParseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiParseFileButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("JVM Panel"));

        invokeGC.setText("Attempt Garbage Collection");
        invokeGC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invokeGCActionPerformed(evt);
            }
        });

        displayMemory.setText("Display Memory");
        displayMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayMemoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(displayMemory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(invokeGC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(962, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(invokeGC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayMemory)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout debugPanelLayout = new javax.swing.GroupLayout(debugPanel);
        debugPanel.setLayout(debugPanelLayout);
        debugPanelLayout.setHorizontalGroup(
            debugPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(debugPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(debugPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(debugPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(debugPanelLayout.createSequentialGroup()
                        .addGroup(debugPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1162, Short.MAX_VALUE)
                            .addGroup(debugPanelLayout.createSequentialGroup()
                                .addComponent(setMysteryFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mysteryFN, javax.swing.GroupLayout.DEFAULT_SIZE, 959, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(debugPanelLayout.createSequentialGroup()
                        .addComponent(clearDebugButton, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(debugStateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(identifyFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MultiParseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108))))
        );
        debugPanelLayout.setVerticalGroup(
            debugPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(debugPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(debugPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setMysteryFileButton)
                    .addComponent(mysteryFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(debugPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearDebugButton)
                    .addComponent(debugStateButton)
                    .addComponent(identifyFileButton)
                    .addComponent(MultiParseFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout DebugTabLayout = new javax.swing.GroupLayout(DebugTab);
        DebugTab.setLayout(DebugTabLayout);
        DebugTabLayout.setHorizontalGroup(
            DebugTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DebugTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(debugPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        DebugTabLayout.setVerticalGroup(
            DebugTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DebugTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(debugPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        appTabs.addTab("Debug", DebugTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 1228, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void identifyFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identifyFileButtonActionPerformed
        String fmt;
        String msg;
        byte[] pem;
        File file;
        long flen;
        int i;
        String mysteryFileName;
        mysteryFileName = mysteryFN.getText();
        Object obj;
        RsaPair rsaPair;
        try {
            pem = PemUtils.readFileToByteArray(mysteryFileName);
        } catch (IOException ex) {
            fmt = "Unable to read from \"%s\"\n%s\n";
            msg = String.format(fmt, mysteryFileName, getEST(ex));
            logError("%s", msg);
            return;
        }
        fmt = "Read %d bytes\n%s\nAttempting to parse\n";
        msg = String.format(fmt, pem.length, new String(pem));
        logDbg("%s", msg);
        try {
            obj = PemUtils.fromPem(pem);
        } catch (PemException ex) {
            fmt = "Error decoding pem object\n%s\n";
            msg = String.format(fmt, getEST(ex));
            logError("%s", msg);
            return;
        }
        fmt = "Object parsed to %s\n";
        msg = String.format(fmt, obj.getClass().getCanonicalName());
        logDbg(fmt, msg);


        if (obj instanceof KeyPair) {
            try {
                KeyPair kp = (KeyPair) obj;
                PrivateKey priv = kp.getPrivate();
                PublicKey pub = kp.getPublic();
                String pubName = pub.getClass().getCanonicalName();
                String privName = priv.getClass().getCanonicalName();
                logDbg("Privkey type = %s\n", privName);
                logDbg("Publickey type = %s\n", pubName);
                rsaPair = new RsaPair(kp);
                logDbg("%s", rsaPair.toString());
            } catch (ConversionException ex) {
                logError("Could not read key params\n%s", getEST(ex));
            }
        } else if (obj instanceof PKCS10CertificationRequest) {
            PKCS10CertificationRequest req = (PKCS10CertificationRequest) obj;
            msg = String.format(fmt, CsrUtils.csrToStr(req));
            logDbg("%s\n", msg);
        } else if (obj instanceof X509CertificateObject) {
            X509CertificateObject cert = (X509CertificateObject) obj;
            String certStr = CertUtils.certToStr(cert);
            logDbg("%s", certStr);
        }
}//GEN-LAST:event_identifyFileButtonActionPerformed

    private void setMysteryFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMysteryFileButtonActionPerformed
        setFileName(mysteryFN);
}//GEN-LAST:event_setMysteryFileButtonActionPerformed

    private void debugStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugStateButtonActionPerformed
        String msg = getStateStr();
        this.logDbg(msg);
}//GEN-LAST:event_debugStateButtonActionPerformed

    private void clearDebugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDebugButtonActionPerformed
        debugMessagesPane.setText("");
}//GEN-LAST:event_clearDebugButtonActionPerformed

    private void csrButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csrButton2ActionPerformed
        setFileName(csrFN2);
}//GEN-LAST:event_csrButton2ActionPerformed

    private void caKeyFNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caKeyFNButtonActionPerformed
        setFileName(caKeyFN);
}//GEN-LAST:event_caKeyFNButtonActionPerformed

    private void caCertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caCertButtonActionPerformed
        setFileName(caCertFN);
}//GEN-LAST:event_caCertButtonActionPerformed

    private void GenerateCsrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateCsrButtonActionPerformed
        StringBuilder sb = new StringBuilder(SB_INIT_CAPACITY);
        List<String> rdn = new ArrayList<String>();
        String tmpStr;
        String fmt;
        String msg;
        String keyFile = keyFN2.getText();
        String csrFile = csrFN1.getText();
        String subjStr;
        KeyPair jKeyPair;
        RsaPair rsaPair;
        int bits;
        byte[] csrBytes;
        byte[] keyBytes;
        PKCS10CertificationRequest csr;

        switch (rsaMapper.getSelectedId()) {
            case LOAD_RSA:
                logDbg("Loading key from file \"%s\"\n", keyFile);
                try {
                    keyBytes = PemUtils.readFileToByteArray(keyFile);
                    jKeyPair = getKeyPairFromBytes(keyBytes);
                } catch (PemException ex) {
                    logError("Error decoding keypair\n%s\n", getEST(ex));
                    return;
                } catch (IOException ex) {
                    logError("Error reading from %s\n%s\n", keyFile, getEST(ex));
                    return;
                }
                try {
                    rsaPair = new RsaPair(jKeyPair);
                } catch (ConversionException ex) {
                    logError("Error converting keypair\n%s\n", getEST(ex));
                    return;
                }
                break;
            default:
                logDbg("Generating fresh key\n");
                try {
                    bits = Integer.parseInt(newCsrKeySizeTextField.getText());
                } catch (NumberFormatException ex) {
                    tmpStr = newCsrKeySizeTextField.getText();
                    fmt = "Error converting %s to an integer\n%s\n";
                    msg = String.format(fmt, tmpStr, getEST(ex));
                    logError("%s\n", msg);
                    return;
                }
                try {
                    rsaPair = RSAKeyUtils.genRSAPair(bits, RsaConst.DEFAULT_PRIME_CERTAINTY);
                } catch (NoSuchAlgorithmException ex) {
                    fmt = "Error generating %d bit key\n%s\n";
                    msg = String.format(fmt, bits, getEST(ex));
                    logError("%s\n", msg);
                    return;
                }
                try {
                    logDbg("Writing key to pem format\n");
                    keyBytes = rsaPair.getPrivAsPem();
                    logDbg("Saving key pem file to \"%s\"\n", keyFile);
                    PemUtils.writeFileFromByteArray(keyFile, keyBytes);
                } catch (IOException ex) {
                    fmt = "Error saving private key to file \"%s\"\n%s";
                    msg = String.format(fmt, keyFile, getEST(ex));
                    logError("%s", msg);
                } catch (RsaException ex) {
                    fmt = "Error converting Private key to pem format\n%s\n";
                    msg = String.format(fmt, getEST(ex));
                    logError("%s", msg);
                }
                break;
        }
        String C = cTextField.getText();
        String ST = stTextField.getText();
        String L = lTextField.getText();
        String O = oTextField.getText();
        String OU = ouTextField.getText();
        String CN = cnTextField.getText();
        String email = emailTextField.getText();
        if (!C.equals("")) {
            rdn.add(String.format("C=%s", C));
        }
        if (!ST.equals("")) {
            rdn.add(String.format("ST=%s", ST));
        }
        if (!L.equals("")) {
            rdn.add(String.format("L=%s", L));
        }
        if (!O.equals("")) {
            rdn.add(String.format("O=%s", O));
        }
        if (!OU.equals("")) {
            rdn.add(String.format("OU=%s", OU));
        }
        if (!CN.equals("")) {
            rdn.add(String.format("CN=%s", CN));
        }

        subjStr = StringUtils.joinString(rdn, ",");
        if (!email.equals("")) {
            subjStr = String.format("%s/emailAddress=%s", subjStr, email);
        }
        logDbg("Encoding subjectName as \"%s\"\n", subjStr);
        try {
            csr = CsrUtils.newCsr(subjStr, rsaPair, caCheckBox.isSelected());
        } catch (RsaException ex) {
            fmt = "Error generating csr\n%s\n";
            msg = String.format(fmt, getEST(ex));
            logError("%s", msg);
            return;
        }
        try {
            csrBytes = PemUtils.toPem(csr);
        } catch (PemException ex) {
            fmt = "Error converting csr to pem format\n%s\n";
            logError(fmt, getEST(ex));
            return;
        }
        try {
            PemUtils.writeFileFromByteArray(csrFile, csrBytes);
        } catch (IOException ex) {
            fmt = "Error writing to file \"%s\"\n%s";
            logError(fmt, csrFile, getEST(ex));
            return;
        }
        logDbg("CSR writtent to file \"%s\"\n", csrFile);
}//GEN-LAST:event_GenerateCsrButtonActionPerformed

    private void keyFnButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyFnButton1ActionPerformed
        setFileName(keyFN2);
}//GEN-LAST:event_keyFnButton1ActionPerformed

    private void csrFnButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csrFnButton1ActionPerformed
        setFileName(csrFN1);
}//GEN-LAST:event_csrFnButton1ActionPerformed

    private void cnTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cnTextFieldActionPerformed

    private void genKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeyButtonActionPerformed
        byte pem[];
        String msg;
        String fmt;
        int keySize;
        String fileName;
        RsaPair key;
        FileWriter fw;
        try {
            keySize = Integer.parseInt(keySizeTextField.getText());
        } catch (NumberFormatException ex) {
            fmt = "Error Converting \"%s\" to an integer\n";
            msg = String.format(fmt, keySizeTextField.getText());
            logError(msg);
            return;
        }
        try {
            key = RSAKeyUtils.genRSAPair(keySize, RsaConst.DEFAULT_PRIME_CERTAINTY);
        } catch (NoSuchAlgorithmException ex) {
            logError(String.format("%s\n", getEST(ex)));
            return;
        }

        logDbg("new Key Generated\n%s\n", key.toString());

        try {
            pem = key.getPrivAsPem();
        } catch (RsaException ex) {
            logError(String.format("%s\n", getEST(ex)));
            return;
        }
        logDbg("New Key generated\n%s\n", new String(pem));
        try {
            PemUtils.writeFileFromByteArray(keyFN1.getText(), pem);
        } catch (IOException ex) {
            fmt = "Error writing to \"%s\"\n%s\n";
            msg = String.format(fmt, keyFN1.getText(), getEST(ex));
            logError(msg);
        }
        logDbg("Key saved to file \"%s\"\n", keyFN1.getText());
}//GEN-LAST:event_genKeyButtonActionPerformed

    private void setKeyFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setKeyFileButtonActionPerformed
        setFileName(keyFN1);
}//GEN-LAST:event_setKeyFileButtonActionPerformed

    private void signCSRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signCSRButtonActionPerformed
        String fmt;
        String msg;
        String caKeyFile = caKeyFN.getText();
        String caCrtFile = caCertFN.getText();
        String csrFile = csrFN2.getText();
        String crtOutFile = certOutFN.getText();
        X509Certificate crt;
        X509CertificateObject caCrt;
        BigInteger serial;
        RsaPair keys;
        PKCS10CertificationRequest req;
        int days;
        byte[] caKeyBytes;
        byte[] caCrtBytes;
        byte[] csrBytes;
        byte[] crtBytes;            // Self sign this CSR
        if (isSerialNumberSpecified.isSelected()) {
            try {
                serial = new BigInteger(serialTextField.getText());
            } catch (NumberFormatException ex) {
                fmt = "Error converting %s to BigInteger\n";
                fmt += " Assuming this was intentional and autogenerating serial num";
                logDbg(fmt, serialTextField.getText());
                serial = null;
            }
        } else {
            serial = null;
        }
        try {
            days = Integer.parseInt(daysTextField.getText());
        } catch (NumberFormatException ex) {
            fmt = "%s could not be converted to an integer\n%s\n";
            logError(fmt, daysTextField.getText(), getEST(ex));
            return;
        }
        try {
            caKeyBytes = PemUtils.readFileToByteArray(caKeyFile);
        } catch (IOException ex) {
            fmt = "Error reading caKey \"%s\"\n%s\n";
            logError(fmt, caKeyFile, getEST(ex));
            return;
        }
        try {
            KeyPair kp = getKeyPairFromBytes(caKeyBytes);
            keys = new RsaPair(kp);
        } catch (RsaException ex) {
            fmt = "Error translating data in \"%s\" to rsa key pair\n%s";
            logError(fmt, caKeyFile, getEST(ex));
            return;
        } catch (RuntimeException ex) {
            fmt = "Object from \"%s\" does not appear to be a valid key\n%s\n";
            logError(fmt, caKeyFile, getEST(ex));
            return;
        }
        try {
            csrBytes = PemUtils.readFileToByteArray(csrFile);
        } catch (IOException ex) {
            fmt = "Error reading csr File \"%s\"\n%s\n";
            logError(fmt, csrFile, getEST(ex));
            return;
        }
        try {
            req = (PKCS10CertificationRequest) PemUtils.fromPem(csrBytes);
        } catch (RsaException ex) {
            fmt = "Error translating \"%s\" to CSR\n%s\n";
            logError(fmt, csrFile, getEST(ex));
            return;
        } catch (RuntimeException ex) {
            fmt = "Object from \"%s\" does not appear to be a valid csr\n%s\n";
            logError(fmt, csrFile, getEST(ex));
            return;
        }
        if (selfSignCA.isSelected()) {
            // Self Sign this CSR
            try {
                crt = CertUtils.selfSignCsrCA(req, keys, days);
            } catch (RsaException ex) {
                fmt = "Error generating Certificate\n%s\n";
                logError(fmt, getEST(ex));
                return;
            }
            try {
                crtBytes = PemUtils.toPem(crt);
            } catch (PemException ex) {
                fmt = "Error encoding Cert to Pem\n%s\n";
                logError(fmt, getEST(ex));
                return;
            }
            try {
                PemUtils.writeFileFromByteArray(crtOutFile, crtBytes);
            } catch (IOException ex) {
                fmt = "Error writing to \"%s\"\n%s\n";
                logError(fmt, getEST(ex));
                return;
            }
            logDbg("Wrote certificate to \"%s\"\n", crtOutFile);
            return;
        } else {
            try {
                caCrtBytes = PemUtils.readFileToByteArray(caCrtFile);
            } catch (IOException ex) {
                fmt = "Error reading CA crt from \"%s\"\n%s\n";
                logError(fmt, caCrtFile, getEST(ex));
                return;
            }
            try {
                caCrt = (X509CertificateObject) PemUtils.fromPem(caCrtBytes);
            } catch (RsaException ex) {
                fmt = "Error translating \"%s\" to X509Certificate\n%s\n";
                logError(fmt, caCrtFile, getEST(ex));
                return;
            } catch (RuntimeException ex) {
                fmt = "Error data in \"%s\" does not appear to be a x509 certificate\n%s\n";
                logError(fmt, caCrtFile, getEST(ex));
                return;
            }
            try {
                crt = CertUtils.signCSR(req, keys, caCrt, days, serial);
            } catch (RsaException ex) {
                logError("Error signing csr\n%s\n", getEST(ex));
                return;
            }
            try {
                crtBytes = PemUtils.toPem(crt);
            } catch (PemException ex) {
                logError("Error converting x509 cert to pem format\n%s\n", getEST(ex));
                return;
            }
            try {
                PemUtils.writeFileFromByteArray(crtOutFile, crtBytes);
            } catch (IOException ex) {
                fmt = "Error saving certificate to file %s\n%s\n";
                logError(fmt, crtOutFile, getEST(ex));
            }

            logDbg("Cert saved to \"%s\"\n", crtOutFile);
        }
    }//GEN-LAST:event_signCSRButtonActionPerformed

    private void setOutputCrtFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setOutputCrtFileButtonActionPerformed
        setFileName(certOutFN);
    }//GEN-LAST:event_setOutputCrtFileButtonActionPerformed

    private void MultiParseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiParseFileButtonActionPerformed
        List<PemBlock> pemBlocks;
        String fileName = mysteryFN.getText();
        String fmt;
        String msg;
        byte[] fileData;
        try {
            fileData = PemUtils.readFileToByteArray(fileName);
        } catch (IOException ex) {
            logError("Error reading file %s\n%s\n", fileName, getEST(ex));
            return;
        }

        pemBlocks = PemUtils.parseMultiPem(fileData);
        for (PemBlock pemBlock : pemBlocks) {
            String className;
            Object obj = pemBlock.getDecodedObject();
            int lineNum = pemBlock.getLineNum();
            className = (obj == null) ? "NULL" : obj.getClass().getCanonicalName();
            try {
                String blockStr = new String(pemBlock.getPemData(), "US-ASCII");
                logDbg("\n\"\"\"\n%s\n\"\"\"\n", blockStr);
            } catch (UnsupportedEncodingException ex) {
                logError("Could not decode to US-ASCII");
            }
            logDbg("Block starting at line %d decoded to object \"%s\"\n", lineNum, className);
        }

    }//GEN-LAST:event_MultiParseFileButtonActionPerformed

    private void vkcKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vkcKeyButtonActionPerformed
        setFileName(vkcKeyFN);
    }//GEN-LAST:event_vkcKeyButtonActionPerformed

    private void verifyKeyAndCertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyKeyAndCertButtonActionPerformed
        String keyFile;
        String certFile;
        byte[] keyPem;
        byte[] certPem;
        List<String> errors;
        keyFile = vkcKeyFN.getText();
        certFile = vkcCertFN.getText();
        try {
            keyPem = PemUtils.readFileToByteArray(keyFile);
        } catch (IOException ex) {
            logError("Error reading key from \"%s\"\n%s\n", keyFile, getEST(ex));
            return;
        }
        try {
            certPem = PemUtils.readFileToByteArray(certFile);
        } catch (IOException ex) {
            logError("Error reading cert from \"%s\"\n%s\n", certFile, getEST(ex));
            return;
        }

        errors = RSAKeyUtils.verifyKeyAndCert(keyPem, certPem);
        if (errors.size() > 0) {
            for (String error : errors) {
                logError("%s\n", error);
            }
        } else {
            logDbg("cert And Key Matched\n");
        }
    }//GEN-LAST:event_verifyKeyAndCertButtonActionPerformed

    private void vkcCertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vkcCertButtonActionPerformed
        setFileName(vkcCertFN);
    }//GEN-LAST:event_vkcCertButtonActionPerformed

    private void setParentCertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setParentCertButtonActionPerformed
        setFileName(issuerCertFN);
    }//GEN-LAST:event_setParentCertButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setFileName(subjectCertFN);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void verifyIssuerAndSubjectCertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyIssuerAndSubjectCertButtonActionPerformed
        String issuerFile;
        String subjectFile;
        List<String> errorList;
        byte[] issuerCertPem;
        byte[] subjectCertPem;

        issuerFile = issuerCertFN.getText();
        subjectFile = subjectCertFN.getText();
        try {
            issuerCertPem = PemUtils.readFileToByteArray(issuerFile);
        } catch (IOException ex) {
            logError("Error reading Issuer Cert from \"%s\"\n%s\n", issuerFile, getEST(ex));
            return;
        }
        try {
            subjectCertPem = PemUtils.readFileToByteArray(subjectFile);
        } catch (IOException ex) {
            logError("Error reading Subject Cert from \"%s\"\n%s\n", subjectFile, getEST(ex));
            return;
        }
        errorList = CertUtils.verifyIssuerAndSubjectCert(issuerCertPem, subjectCertPem);
        if (errorList.size() <= 0) {
            logDbg("Issuer and Subject Cert are valid\n");
        } else {
            for (String errorStr : errorList) {
                logError("%s\n", errorStr);
            }
        }

    }//GEN-LAST:event_verifyIssuerAndSubjectCertButtonActionPerformed

    private void clearKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearKeyButtonActionPerformed
        keyText.setText("");
    }//GEN-LAST:event_clearKeyButtonActionPerformed

    private void verifyKeyCertChainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyKeyCertChainActionPerformed
        String key;
        String cert;
        String chain;

        key = (keyText.getText().length() > 0) ? keyText.getText() : null;
        cert = (certText.getText().length() > 0) ? certText.getText() : null;
        chain = (chainText.getText().length() > 0) ? chainText.getText() : null;
        ZeusCertFile zcf;
        List<String> errorList;
        zcf = ZeusUtil.getCertFile(key, cert, chain);
        if (zcf.isError()) {
            for (String errorStr : zcf.getErrorList()) {
                logError("%s\n", errorStr);
            }
        } else {
            logDbg("Certificate key and chain are valid");
            logDbg(String.format("reencoded Key:\n%s\n", zcf.getPrivate_key()));
            logDbg(String.format("\n\ncrt:\n%s\n\n", zcf.getPublic_cert()));
        }

    }//GEN-LAST:event_verifyKeyCertChainActionPerformed

    private void clearCertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCertButtonActionPerformed
        certText.setText("");
    }//GEN-LAST:event_clearCertButtonActionPerformed

    private void clearChainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearChainButtonActionPerformed
        chainText.setText("");
    }//GEN-LAST:event_clearChainButtonActionPerformed

    private void invokeGCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invokeGCActionPerformed
        Runtime rt = Runtime.getRuntime();
        rt.gc();
        logDbg("Called Runtime.getRuntime().gc()\n");
    }//GEN-LAST:event_invokeGCActionPerformed

    private void displayMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayMemoryActionPerformed
        Runtime rt = Runtime.getRuntime();
        long freeMem = rt.freeMemory();
        long totalMem = rt.totalMemory();
        long maxMem = rt.maxMemory();
        logDbg("displayMemoryClicked:\n");
        logDbg("   freeMem = %d\n", freeMem);
        logDbg("   totalMem = %d\n", totalMem);
        logDbg("   maxMem = %d\n", maxMem);
    }//GEN-LAST:event_displayMemoryActionPerformed

    private void userInit() {
        RsaConst.init();
        StyledDocument doc = (StyledDocument) debugMessagesPane.getStyledDocument();

        Style red = doc.addStyle("red", null);
        StyleConstants.setForeground(red, Color.red);
        this.redStyle = red;

        Style green = doc.addStyle("green", null);
        StyleConstants.setForeground(green, Color.green);
        this.greenStyle = green;

        setDebugLogStyle(this.greenStyle);

        this.debugMessagesDoc = doc;

        rsaMapper = new ButtonGroupMapper();
        rsaMapper.add(loadRsaRadio, LOAD_RSA);
        rsaMapper.add(saveRsaRadio, SAVE_RSA);
    }

    private File chooseFilePopUp() {
        JFileChooser fc;
        int ret;
        File file = null;

        fc = new JFileChooser();
        ret = fc.showSaveDialog(jLabel1);
        if (ret == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
        }
        return file;
    }

    // User click Set Csr file in CSR generator
    private void setFileName(javax.swing.JTextField jTextField) {
        File file = chooseFilePopUp();
        if (file == null) {
            return;
        }
        jTextField.setText(file.getAbsolutePath());
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                CaFrame caFrame = new CaFrame();
                caFrame.setVisible(true);
                List<String> el = new ArrayList<String>();
                el.add("Errors will be in RED");
                caFrame.logErrorList(el);
                caFrame.logDbg("Everything else will be green\n");
            }
        });
    }

    private void setDebugLogStyle(Style style) {
        this.currStyle = style;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CSRSigningPanel;
    private javax.swing.JPanel DebugTab;
    private javax.swing.JButton GenerateCsrButton;
    private javax.swing.JButton MultiParseFileButton;
    private javax.swing.JPanel VerifyPanel;
    private javax.swing.JTabbedPane appTabs;
    private javax.swing.JTextField cTextField;
    private javax.swing.JButton caCertButton;
    private javax.swing.JTextField caCertFN;
    private javax.swing.JCheckBox caCheckBox;
    private javax.swing.JPanel caFilesPanel;
    private javax.swing.JTextField caKeyFN;
    private javax.swing.JButton caKeyFNButton;
    private javax.swing.JTextField certOutFN;
    private javax.swing.JTextPane certText;
    private javax.swing.JTextPane chainText;
    private javax.swing.JButton clearCertButton;
    private javax.swing.JButton clearChainButton;
    private javax.swing.JButton clearDebugButton;
    private javax.swing.JButton clearKeyButton;
    private javax.swing.JTextField cnTextField;
    private javax.swing.JButton csrButton2;
    private javax.swing.JTextField csrFN1;
    private javax.swing.JTextField csrFN2;
    private javax.swing.JButton csrFnButton1;
    private javax.swing.JPanel csrGenTab;
    private javax.swing.JPanel csrOptionsPanel;
    private javax.swing.JPanel csrSigningTab;
    private javax.swing.JPanel csrSubjectPanel;
    private javax.swing.JTextField daysTextField;
    private javax.swing.JTextPane debugMessagesPane;
    private javax.swing.JPanel debugPanel;
    private javax.swing.JButton debugStateButton;
    private javax.swing.JButton displayMemory;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton genKeyButton;
    private javax.swing.JButton identifyFileButton;
    private javax.swing.JButton invokeGC;
    private javax.swing.JCheckBox isSerialNumberSpecified;
    private javax.swing.JTextField issuerCertFN;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField keyFN1;
    private javax.swing.JTextField keyFN2;
    private javax.swing.JButton keyFnButton1;
    private javax.swing.JPanel keyGenTab;
    private javax.swing.JTextField keySizeTextField;
    private javax.swing.JTextPane keyText;
    private javax.swing.JPanel keycertandchainPanel;
    private javax.swing.JTextField lTextField;
    private javax.swing.JRadioButton loadRsaRadio;
    private javax.swing.JPanel lsRSAPanel;
    private javax.swing.JTextField mysteryFN;
    private javax.swing.JTextField newCsrKeySizeTextField;
    private javax.swing.JTextField oTextField;
    private javax.swing.JTextField ouTextField;
    private javax.swing.JPanel rsaGenPanel;
    private javax.swing.JRadioButton saveRsaRadio;
    private javax.swing.JCheckBox selfSignCA;
    private javax.swing.JTextField serialTextField;
    private javax.swing.JButton setKeyFileButton;
    private javax.swing.JButton setMysteryFileButton;
    private javax.swing.JButton setOutputCrtFileButton;
    private javax.swing.JButton setParentCertButton;
    private javax.swing.JButton signCSRButton;
    private javax.swing.JTextField stTextField;
    private javax.swing.JTextField subjectCertFN;
    private javax.swing.JButton verifyIssuerAndSubjectCertButton;
    private javax.swing.JButton verifyKeyAndCertButton;
    private javax.swing.JButton verifyKeyCertChain;
    private javax.swing.JPanel verifyKeyCertPanel;
    private javax.swing.JButton vkcCertButton;
    private javax.swing.JTextField vkcCertFN;
    private javax.swing.JButton vkcKeyButton;
    private javax.swing.JTextField vkcKeyFN;
    private javax.swing.JPanel x509OptionsPanel;
    // End of variables declaration//GEN-END:variables
    private Style redStyle;
    private Style greenStyle;
    private Style currStyle;
    private StyledDocument debugMessagesDoc;
    private static final int SB_INIT_CAPACITY = 4096;
    private static final int MAX_FILESIZE = 1024 * 1024 * 2;
    private ButtonGroupMapper rsaMapper;

    // sends the string.formatter style string to the debugMessages textarea of
    // the frame
    public void logDbg(String format, Object... args) {
        String msg = String.format(format, args);

        StyledDocument doc = debugMessagesDoc;
        try {
            doc.insertString(doc.getLength(), msg, currStyle);
        } catch (BadLocationException ex) {
            Logger.getLogger(CaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void logError(String format, Object... args) {
        setDebugLogStyle(redStyle);
        logDbg(format, args);
        setDebugLogStyle(greenStyle);
    }

    private void logErrorList(List<String> el) {
        setDebugLogStyle(redStyle);
        for (String err : el) {
            logDbg(err + "\n");
        }
        setDebugLogStyle(greenStyle);
    }

    private KeyPair getKeyPairFromBytes(byte[] pemBytes) throws PemException {
        Object pemObj = PemUtils.fromPem(pemBytes);
        // Incase the object is returned as a JCERSAPrivateCrtKey instead of KeyPair
        if (pemObj instanceof JCERSAPrivateCrtKey) {
            pemObj = HackedProviderAccessor.newKeyPair((JCERSAPrivateCrtKey) pemObj);
        }
        KeyPair kp = (KeyPair) pemObj;
        return kp;
    }

    private String getStateStr() {
        StringBuilder sb = new StringBuilder(SB_INIT_CAPACITY);
        String fmt;
        String msg;
        String val;
        sb.append(String.format("Generate Key:\n"));
        val = StringUtils.displayParsedInt(keySizeTextField.getText());
        sb.append(String.format("\tkeyGenSize=%s\n", val));
        sb.append(String.format("\tkeyFile=\"%s\"\n", keyFN1.getText()));
        sb.append(String.format("\n"));
        sb.append(String.format("CSR Subject:\n"));
        sb.append(String.format("\tc=\"%s\"\n", cTextField.getText()));
        sb.append(String.format("\tst=\"%s\"\n", stTextField.getText()));
        sb.append(String.format("\tl=\"%s\"\n", lTextField.getText()));
        sb.append(String.format("\tou=\"%s\"\n", ouTextField.getText()));
        sb.append(String.format("\tcn=\"%s\"\n", cnTextField.getText()));
        sb.append(String.format("\temail=\"%s\"\n", emailTextField.getText()));
        sb.append(String.format("\n"));
        sb.append(String.format("\tkeyFile=\"%s\"\n", keyFN2.getText()));
        sb.append(String.format("\tCsrFile=\"%s\"\n", csrFN1.getText()));

        fmt = "\tcsrKeySize = %s\n";
        val = StringUtils.displayParsedInt(this.newCsrKeySizeTextField.getText());
        msg = String.format(fmt, val);
        sb.append(msg);

        val = (caCheckBox.isSelected()) ? "True" : "False";
        sb.append(String.format("\tcaCsr=%s\n", val));
        switch (rsaMapper.getSelectedId()) {
            case LOAD_RSA:
                val = "loadRsa";
                break;
            case SAVE_RSA:
                val = "saveRsa";
                break;
            default:
                val = "Unknown";
                break;
        }
        msg = String.format("\tload or save RSA set to %s\n", val);
        sb.append(msg);
        return sb.toString();
    }
}
